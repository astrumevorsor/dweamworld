---
import Layout from '~/layouts/PageLayout.astro';
import Header from '~/components/widgets/Header.astro';
import GameView from '~/components/dweam/GameViewReact';
import ParamsPanel from '~/components/dweam/ParamsPanelReact';
import { api } from '~/lib/api';

const metadata = {
  title: 'Loading...',
  description: '',
};

const { type, id } = Astro.params;
let gameData = null;

try {
  if (id && type) {
    const base_url = process.env.INTERNAL_BACKEND_URL || 'http://localhost:8080';
    const response = await fetch(`${base_url}/game_info/${type}/${id}`);
    if (response.ok) {
      gameData = await response.json();
      metadata.title = gameData.name || 'Game';
    } else {
      console.error('Failed to fetch game', response.status, response.statusText);
    }
  } else {
    console.error('No game selected');
  }
} catch (error) {
  console.error('Error fetching game:', error);
}
---
<Layout metadata={metadata}>
  <div class="flex flex-col gap-8 max-w-6xl mx-auto px-4 mt-8" id="main-content">
    <h1 id="game-title" class="text-3xl font-bold mb-4">{gameData ? gameData.name : 'Loading...'}</h1>
    <div class="relative flex gap-8">
      <div id="controls-section" class="w-1/3">
        {gameData && gameData.buttons ? (
          <div class="flex gap-4">
            <div class="w-80 shrink-0">
              <div class="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg">
                <button
                  id="toggle-controls"
                  class="w-full text-left"
                  aria-label="Toggle controls visibility"
                >
                  <div class="flex justify-between items-center">
                    <h2 class="text-xl font-bold">Controls</h2>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 transform transition-transform text-gray-600 dark:text-gray-400" id="controls-chevron" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                    </svg>
                  </div>
                </button>
                <div id="controls-wrapper" class="transition-all duration-300 overflow-hidden">
                  <div id="controls-content" class="space-y-2 mt-4">
                    {Object.entries(gameData.buttons).map(([action, key]) => (
                      <div class="flex justify-between items-center">
                        <span class="flex items-center">
                          <span class="inline-block w-6 text-center">{action.split(' ')[0]}</span>
                          <span class="ml-2">{action.split(' ').slice(1).join(' ')}</span>
                        </span>
                        <span class="font-mono">{key}</span>
                      </div>
                    ))}
                    <p class="mt-4 text-sm text-gray-600 dark:text-gray-400">Click on the game to play, press Escape to release the mouse.</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ) : null}
        <div id="params-section" class="w-80 mt-4">
          {gameData ? <ParamsPanel client:load gameType={type} gameId={id} /> : null}
        </div>
      </div>
      <div id="game-view" class={`flex-grow sticky top-[150px] ${gameData && gameData.buttons ? '' : 'hidden'}`} style="height: fit-content;">
        <GameView client:load gameType={type} gameId={id} />
      </div>
    </div>

    <div id="game-info-description-section" class="mt-8">
      {gameData ? (
        <div class="bg-gray-100 dark:bg-gray-800 p-6 rounded-lg">
          <div class="flex justify-between items-start mb-4">
            <h2 class="text-2xl font-bold">{gameData.title || gameData.id}</h2>
            <a
              href="https://discord.gg/w9tNTbfg2b"
              class="text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
              target="_blank"
            >
              Report Issue
            </a>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              {gameData.description && (
                <p class="text-gray-600 dark:text-gray-300 whitespace-pre-line">{gameData.description}</p>
              )}
              <div class="mt-4 flex flex-wrap gap-2">
                {gameData.tags?.length > 0 && gameData.tags.map(tag => (
                  <span class="px-3 py-1 bg-gray-200 dark:bg-gray-700 rounded-full text-sm">
                    {tag}
                  </span>
                ))}
              </div>
            </div>
            <div class="space-y-3 text-sm">
              {gameData.author && (
                <div class="flex justify-between">
                  <span class="text-gray-600 dark:text-gray-400">Created by</span>
                  <span class="font-medium">{gameData.author}</span>
                </div>
              )}
              {gameData.buildDate && (
                <div class="flex justify-between">
                  <span class="text-gray-600 dark:text-gray-400">Built on</span>
                  <span class="font-medium">{new Date(gameData.buildDate).toLocaleDateString()}</span>
                </div>
              )}
              {gameData.repo_link && (
                <div class="flex justify-between">
                  <span class="text-gray-600 dark:text-gray-400">Repository</span>
                  <a href={gameData.repo_link} class="font-medium text-blue-600 dark:text-blue-400 break-words">
                    {gameData.repo_link}
                  </a>
                </div>
              )}
            </div>
          </div>
        </div>
      ) : null}
    </div>
  </div>
  <div id="error-message" class="hidden max-w-2xl mx-auto px-4 mt-8 text-center">
    <!-- Error message will be inserted here -->
  </div>
</Layout>

<script>
  const toggleButton = document.getElementById('toggle-controls');
  const controlsWrapper = document.getElementById('controls-wrapper');
  const controlsContent = document.getElementById('controls-content');
  const chevron = document.getElementById('controls-chevron');
  
  if (toggleButton && controlsWrapper && controlsContent && chevron) {
    // Add a larger buffer to the height calculation
    controlsWrapper.style.maxHeight = (controlsContent.offsetHeight + 24) + 'px';
    
    toggleButton.addEventListener('click', () => {
      const isExpanded = controlsWrapper.style.maxHeight !== '0px';
      
      if (isExpanded) {
        controlsWrapper.style.maxHeight = '0px';
        controlsWrapper.style.opacity = '0';
        chevron.style.transform = 'rotate(-90deg)';
      } else {
        controlsWrapper.style.maxHeight = (controlsContent.offsetHeight + 24) + 'px';
        controlsWrapper.style.opacity = '1';
        chevron.style.transform = 'rotate(0)';
      }
    });
  }
</script>
