name: Build Windows Executable

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: './dweam_web/pnpm-lock.yaml'

    - name: Install Visual Studio Build Tools
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x64

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: |
          ./.venv
          C:\Users\runneradmin\AppData\Local\pypoetry\Cache
          C:\Users\runneradmin\AppData\Local\pip\Cache
        key: ${{ runner.os }}-poetry-deps-${{ hashFiles('poetry.lock') }}

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry poetry-pyinstaller-plugin
        poetry config installer.parallel false

    - name: Cache frontend build
      uses: actions/cache@v4
      with:
        path: ./dweam_web/dist
        key: ${{ runner.os }}-pnpm-build-${{ hashFiles('dweam_web/src/**') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-build-

    - name: Build frontend
      shell: cmd
      run: |
        cd dweam_web
        pnpm install
        pnpm run build
        if not exist dist\server (
          echo Frontend build failed - server directory missing
          exit 1
        )
        if not exist dist\client (
          echo Frontend build failed - client directory missing
          exit 1
        )
        cd ..

    - name: Install Python dependencies
      run: |
        poetry config virtualenvs.in-project true
        poetry install --no-interaction -E local
        poetry add pyinstaller

    - name: Prepare frontend files
      shell: cmd
      run: |
        if exist frontend rmdir /s /q frontend
        mkdir frontend\server
        mkdir frontend\client
        
        echo Copying frontend server files...
        robocopy "dweam_web\dist\server" "frontend\server" /E /NFL /NDL /NJH /NJS /nc /ns /np || exit 0
        if not exist frontend\server\entry.mjs (
          echo Frontend server files not copied correctly
          exit 1
        )
        
        echo Copying frontend client files...
        robocopy "dweam_web\dist\client" "frontend\client" /E /NFL /NDL /NJH /NJS /nc /ns /np || exit 0
        if not exist frontend\client\index.html (
          echo Frontend client files not copied correctly
          exit 1
        )

    - name: Prepare Node.js
      shell: cmd
      run: |
        echo Copying Node.js executable...
        copy "C:\Program Files\nodejs\node.exe" "node.exe"
        if not exist node.exe (
          echo Failed to copy node.exe
          exit 1
        )
        
        REM Copy required Node.js files
        mkdir node_modules
        echo Copying Node.js built-in modules...
        robocopy "C:\Program Files\nodejs\node_modules" "node_modules" /E /NFL /NDL /NJH /NJS /nc /ns /np || exit 0
        
        echo Copying project dependencies...
        robocopy "dweam_web\node_modules" "node_modules" /E /NFL /NDL /NJH /NJS /nc /ns /np || exit 0

    - name: Build Windows executable
      shell: cmd
      run: |
        echo Building release version...
        poetry run pyinstaller main.py --name dweam --onefile --noconsole ^
          --add-data "frontend\server;frontend\server" ^
          --add-data "frontend\client;frontend\client" ^
          --add-binary "node.exe;." ^
          --add-data "node_modules;node_modules"
        
        echo Building debug version...
        poetry run pyinstaller main.py --name dweam-debug --onefile ^
          --add-data "frontend\server;frontend\server" ^
          --add-data "frontend\client;frontend\client" ^
          --add-binary "node.exe;." ^
          --add-data "node_modules;node_modules"

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: dweam-windows
        path: dist/dweam.exe

    - name: Upload debug artifact
      uses: actions/upload-artifact@v4
      with:
        name: dweam-windows-debug
        path: dist/dweam-debug.exe
